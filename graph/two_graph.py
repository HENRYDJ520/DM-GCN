import sys
import numpy as np

sys.path.extend(['../'])

num_node = 25
self_link = [(i, i) for i in range(num_node)]
inward_ori_index = [(1, 2), (2, 21), (3, 21), (4, 3), (5, 21), (6, 5), (7, 6),
                    (8, 7), (9, 21), (10, 9), (11, 10), (12, 11), (13, 1),
                    (14, 13), (15, 14), (16, 15), (17, 1), (18, 17), (19, 18),
                    (20, 19), (22, 23), (23, 8), (24, 25), (25, 12)]
inward = [(i - 1, j - 1) for (i, j) in inward_ori_index]
outward = [(j, i) for (i, j) in inward]
neighbor = inward + outward
# 多人骨架
'''inward_ori_index_two_1 = [(1, 2), (2, 21), (3, 21), (4, 3), (5, 21), (6, 5), (7, 6), (8, 7), (9, 21), (10, 9),
                          (11, 10), (12, 11), (13, 1), (14, 13), (15, 14), (16, 15), (17, 1), (18, 17), (19, 18), (20, 19),
                          (22, 23), (23, 8), (24, 25), (25, 12)] + \
                         [(26, 27), (27, 46), (28, 46), (29, 28), (30, 46),
                          (31, 30), (32, 31), (33, 32), (34, 46), (35, 34),
                          (36, 35), (37, 36), (38, 26), (39, 38), (40, 39),
                          (41, 40), (42, 26), (43, 42), (44, 43), (45, 44), (47, 48), (48, 33), (49, 50), (50, 37)] + \
                         [(21, 46)] + \
                         [(23, 25), (48, 50), (23, 48), (25, 50)] + \
                        [(19, 15), (44, 40), (15, 40), (19, 44)]  # 交互链接关系'''
inward_ori_index_two_1 = [(1, 2), (2, 21), (3, 21), (4, 3), (5, 21), (6, 5), (7, 6), (8, 7), (9, 21), (10, 9),
                          (11, 10), (12, 11), (13, 1), (14, 13), (15, 14), (16, 15), (17, 1), (18, 17), (19, 18), (20, 19),
                          (22, 8), (23, 8), (24, 12), (25, 12)] + \
                         [(26, 27), (27, 46), (28, 46), (29, 28), (30, 46),
                          (31, 30), (32, 31), (33, 32), (34, 46), (35, 34),
                          (36, 35), (37, 36), (38, 26), (39, 38), (40, 39),
                          (41, 40), (42, 26), (43, 42), (44, 43), (45, 44), (47, 33), (48, 33), (49, 37), (50, 37)] + \
                         [(21, 46)] + \
                         [(23, 25), (48, 50), (23, 48), (25, 50)] + \
                        [(19, 15), (44, 40), (15, 40), (19, 44)]  # 交互链接关系
inward_two_1 = [(i - 1, j - 1) for (i, j) in inward_ori_index_two_1]
outward_two_1 = [(j, i) for (i, j) in inward_two_1]
neighbor_two_1 = inward_two_1 + outward_two_1

inward_ori_index_two_204 = [(1, 2), (2, 3), (3, 4), (4, 3), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17),
                            (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
                            (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51),
                            (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68),
                            (69,70),(70,71),(71,72),(72,73),(73,74),(74,75),(75,76),(76,77),(77,78),(78,79),(79,80),(80,81),(81,82),(82,83),(83,84),(84,85),
                            (86,87),(87,88),(88,89),(89,90),(90,91),(91,92),(92,93),(93,94),(94,95),(95,96),(96,97),(97,98),(98,99),(99,100),(100,101),(101,102),
                            (103,104),(104,105),(105,106),(106,107),(107,108),(108,109),(109,110),(110,111),(111,112),(112,113),(113,114),(114,115),(115,116),(116,117),(117,118),(118,119),
                            (120,121),(121,122),(122,123),(123,124),(124,125),(125,126),(126,127),(127,128),(128,129),(129,130),(130,131),(131,132),(132,133),(133,134),(134,135),(135,136),
                            (137,138),(138,139),(139,140),(140,141),(141,142),(142,143),(143,144),(144,145),(145,146),(146,147),(147,148),(148,149),(149,150),(150,151),(151,152),(152,153),
                            (154,155),(155,156),(156,157),(157,158),(158,159),(159,160),(160,161),(161,162),(162,163),(163,164),(164,165),(165,166),(166,167),(167,168),(168,169),(169,170),
                            (171,172),(172,173),(173,174),(174,175),(175,176),(176,177),(177,178),(178,179),(179,180),(180,181),(181,182),(182,183),(183,184),(184,185),(185,186),(186,187),
                            (188,189),(189,190),(190,191),(191,192),(192,193),(193,194),(194,195),(195,196),(196,197),(197,198),(198,199),(199,200),(200,201),(201,202),(202,203),(203,204)]
inward_two_204 = [(i - 1, j - 1) for (i, j) in inward_ori_index_two_204]
outward_two_204 = [(j, i) for (i, j) in inward_two_204]
neighbor_two_204 = inward_two_204 + outward_two_204
"""
多人图方法
"""

class Graph_two:
    def __init__(self, joint_num):
        self.edges = neighbor
        self.edges_two_1 = neighbor_two_1
        self.edges_two_204 = neighbor_two_204
        self.num_nodes = joint_num
        self.self_loops = [(i, i) for i in range(self.num_nodes)]
        self.self_loops_one = [(i, i) for i in range(25)]

        self.A_binary = self.get_adjacency_matrix(self.edges, 25)
        self.A_binary_with_I = self.get_adjacency_matrix(self.edges + self.self_loops_one, 25)
        self.A_norm = self.normalize_adjacency_matrix(self.A_binary_with_I)
        # self.A1 = tools.get_spatial_graph(num_node, self_link, inward, outward)
        self.A_two_1 = self.normalize_adjacency_matrix(self.get_adjacency_matrix(self.edges_two_1 + self.self_loops, self.num_nodes))
        self.A_two_204 = self.normalize_adjacency_matrix(self.get_adjacency_matrix(self.edges_two_204 + self.self_loops, self.num_nodes))

    def get_adjacency_matrix(self, edges, num_nodes):
        A = np.zeros((num_nodes, num_nodes), dtype=np.float32)
        for edge in edges:
            A[edge] = 1.
        return A

    def normalize_adjacency_matrix(self, A):
        node_degrees = A.sum(-1)
        degs_inv_sqrt = np.power(node_degrees, -0.5)
        norm_degs_matrix = np.eye(len(node_degrees)) * degs_inv_sqrt
        return (norm_degs_matrix @ A @ norm_degs_matrix).astype(np.float32)
